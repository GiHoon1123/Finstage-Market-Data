#!/usr/bin/env python3
"""
Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ïä§ÌÅ¨Î¶ΩÌä∏

Ïó¨Îü¨ Ï¢ÖÎ™©ÏùÑ ÎèôÏãúÏóê Î∂ÑÏÑùÌïòÏó¨ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í¥ÄÏ†êÏóêÏÑú Ìà¨Ïûê Í∏∞Ìöå Î∞úÍµ¥
- ÏÑπÌÑ∞Î≥Ñ Î∂ÑÏÑù
- ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù
- Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏµúÏ†ÅÌôî
- Î¶¨Ïä§ÌÅ¨ Î∂ÑÏÇ∞ Î∂ÑÏÑù
"""

import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
import pandas as pd
import numpy as np

# ÏÉÅÏúÑ ÎîîÎ†âÌÜ†Î¶¨Î•º ÌååÏù¥Ïç¨ Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.common.infra.client.yahoo_price_client import YahooPriceClient
from app.technical_analysis.service.technical_indicator_service import (
    TechnicalIndicatorService,
)
from app.technical_analysis.service.technical_monitor_service import (
    TechnicalMonitorService,
)


class PortfolioAnalyzer:
    """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÑùÍ∏∞"""

    def __init__(self):
        self.yahoo_client = YahooPriceClient()
        self.indicator_service = TechnicalIndicatorService()
        self.monitor_service = TechnicalMonitorService()

        # Î∂ÑÏÑù ÎåÄÏÉÅ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ïÏùò
        self.portfolios = {
            "tech_giants": {
                "name": "ÎπÖÌÖåÌÅ¨ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§",
                "symbols": {
                    "AAPL": "Apple",
                    "MSFT": "Microsoft",
                    "GOOGL": "Alphabet",
                    "AMZN": "Amazon",
                    "TSLA": "Tesla",
                },
            },
            "etf_portfolio": {
                "name": "ETF Ìè¨Ìä∏Ìè¥Î¶¨Ïò§",
                "symbols": {
                    "QQQ": "ÎÇòÏä§Îã• ETF",
                    "SPY": "S&P 500 ETF",
                    "IWM": "Îü¨ÏÖÄ 2000 ETF",
                    "VTI": "Ï†ÑÏ≤¥ ÏãúÏû• ETF",
                    "ARKK": "ÌòÅÏã† Í∏∞Ïà† ETF",
                },
            },
            "market_indices": {
                "name": "Ï£ºÏöî ÏßÄÏàò",
                "symbols": {
                    "^IXIC": "ÎÇòÏä§Îã• Ï¢ÖÌï©",
                    "^GSPC": "S&P 500",
                    "^DJI": "Îã§Ïö∞Ï°¥Ïä§",
                    "^RUT": "Îü¨ÏÖÄ 2000",
                    "^VIX": "Î≥ÄÎèôÏÑ± ÏßÄÏàò",
                },
            },
        }

    def analyze_portfolio_signals(self, portfolio_key: str) -> Dict[str, Any]:
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ïã†Ìò∏ Î∂ÑÏÑù"""
        if portfolio_key not in self.portfolios:
            print(f"‚ùå Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ '{portfolio_key}' ÏóÜÏùå")
            return {}

        portfolio = self.portfolios[portfolio_key]
        portfolio_name = portfolio["name"]
        symbols = portfolio["symbols"]

        print(f"üìä {portfolio_name} Ïã†Ìò∏ Î∂ÑÏÑù ÏãúÏûë")
        print(f"üéØ Î∂ÑÏÑù Ï¢ÖÎ™©: {len(symbols)}Í∞ú")

        results = {}
        signal_summary = {"bullish": [], "bearish": [], "neutral": []}

        for symbol, name in symbols.items():
            print(f"\nüîç {symbol} ({name}) Î∂ÑÏÑù Ï§ë...")

            try:
                # Ï¢ÖÌï© Ïã†Ìò∏ Î∂ÑÏÑù
                comprehensive_result = (
                    self.monitor_service.monitor_comprehensive_signals(symbol)
                )

                if comprehensive_result:
                    current_price = comprehensive_result["current_price"]
                    price_change_pct = comprehensive_result["price_change_pct"]
                    signals = comprehensive_result.get("signals", {})

                    # ÏãúÏû• Ïã¨Î¶¨ Î∂ÑÏÑù
                    sentiment_result = self.monitor_service.monitor_market_sentiment(
                        symbol
                    )

                    # Í≤∞Í≥º Ï†ÄÏû•
                    results[symbol] = {
                        "name": name,
                        "current_price": current_price,
                        "price_change_pct": price_change_pct,
                        "signals": signals,
                        "sentiment": sentiment_result,
                        "indicators": comprehensive_result.get("indicators", {}),
                    }

                    # Ïã†Ìò∏ Î∂ÑÎ•ò
                    if sentiment_result:
                        sentiment_ratio = sentiment_result["ratio"]
                        if sentiment_ratio >= 0.7:
                            signal_summary["bullish"].append(symbol)
                        elif sentiment_ratio <= 0.3:
                            signal_summary["bearish"].append(symbol)
                        else:
                            signal_summary["neutral"].append(symbol)

                    print(
                        f"  üí∞ ÌòÑÏû¨Í∞Ä: {current_price:.2f} ({price_change_pct:+.2f}%)"
                    )
                    print(f"  üîî Ïã†Ìò∏: {len(signals)}Í∞ú")
                    if sentiment_result:
                        print(
                            f"  üß† Ïã¨Î¶¨: {sentiment_result['sentiment']} {sentiment_result['emoji']}"
                        )

            except Exception as e:
                print(f"  ‚ùå {symbol} Î∂ÑÏÑù Ïã§Ìå®: {e}")
                results[symbol] = {"error": str(e)}

        return {
            "portfolio_name": portfolio_name,
            "results": results,
            "signal_summary": signal_summary,
            "analysis_time": datetime.now(),
        }

    def calculate_portfolio_correlation(
        self, portfolio_key: str, period: str = "6mo"
    ) -> Dict[str, Any]:
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù"""
        if portfolio_key not in self.portfolios:
            return {}

        portfolio = self.portfolios[portfolio_key]
        symbols = list(portfolio["symbols"].keys())

        print(f"\nüìä {portfolio['name']} ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù")

        # Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        price_data = {}
        for symbol in symbols:
            try:
                df = self.yahoo_client.get_daily_data(symbol, period=period)
                if df is not None and len(df) > 50:
                    price_data[symbol] = df["Close"].pct_change().dropna()
                    print(f"  ‚úÖ {symbol}: {len(price_data[symbol])}Ïùº Îç∞Ïù¥ÌÑ∞")
                else:
                    print(f"  ‚ùå {symbol}: Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±")
            except Exception as e:
                print(f"  ‚ùå {symbol}: {e}")

        if len(price_data) < 2:
            print("‚ùå ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑùÏùÑ ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±")
            return {}

        # ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îß§Ìä∏Î¶≠Ïä§ Í≥ÑÏÇ∞
        returns_df = pd.DataFrame(price_data)
        correlation_matrix = returns_df.corr()

        # ÌèâÍ∑† ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ
        avg_correlation = correlation_matrix.values[
            np.triu_indices_from(correlation_matrix.values, k=1)
        ].mean()

        # Í∞ÄÏû• ÎÜíÏùÄ/ÎÇÆÏùÄ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Ï∞æÍ∏∞
        corr_pairs = []
        for i in range(len(correlation_matrix.columns)):
            for j in range(i + 1, len(correlation_matrix.columns)):
                symbol1 = correlation_matrix.columns[i]
                symbol2 = correlation_matrix.columns[j]
                corr_value = correlation_matrix.iloc[i, j]
                corr_pairs.append((symbol1, symbol2, corr_value))

        # Ï†ïÎ†¨
        corr_pairs.sort(key=lambda x: abs(x[2]), reverse=True)

        return {
            "portfolio_name": portfolio["name"],
            "correlation_matrix": correlation_matrix,
            "average_correlation": avg_correlation,
            "highest_correlation": corr_pairs[0] if corr_pairs else None,
            "lowest_correlation": corr_pairs[-1] if corr_pairs else None,
            "all_correlations": corr_pairs,
        }

    def analyze_sector_rotation(self) -> Dict[str, Any]:
        """ÏÑπÌÑ∞ Î°úÌÖåÏù¥ÏÖò Î∂ÑÏÑù"""
        print("\nüîÑ ÏÑπÌÑ∞ Î°úÌÖåÏù¥ÏÖò Î∂ÑÏÑù")

        # ÏÑπÌÑ∞ ETFÎì§
        sector_etfs = {
            "XLK": "Í∏∞Ïà†",
            "XLF": "Í∏àÏúµ",
            "XLV": "Ìó¨Ïä§ÏºÄÏñ¥",
            "XLE": "ÏóêÎÑàÏßÄ",
            "XLI": "ÏÇ∞ÏóÖ",
            "XLY": "ÏÜåÎπÑÏû¨",
            "XLP": "ÌïÑÏàòÏÜåÎπÑÏû¨",
            "XLU": "Ïú†Ìã∏Î¶¨Ìã∞",
            "XLB": "ÏÜåÏû¨",
            "XLRE": "Î∂ÄÎèôÏÇ∞",
        }

        sector_performance = {}

        for symbol, sector_name in sector_etfs.items():
            try:
                # ÏµúÍ∑º 1Í∞úÏõî, 3Í∞úÏõî, 6Í∞úÏõî ÏÑ±Í≥º Í≥ÑÏÇ∞
                df_1m = self.yahoo_client.get_daily_data(symbol, period="1mo")
                df_3m = self.yahoo_client.get_daily_data(symbol, period="3mo")
                df_6m = self.yahoo_client.get_daily_data(symbol, period="6mo")

                performance = {}

                if df_1m is not None and len(df_1m) >= 2:
                    performance["1m"] = (
                        (df_1m["Close"].iloc[-1] / df_1m["Close"].iloc[0]) - 1
                    ) * 100

                if df_3m is not None and len(df_3m) >= 2:
                    performance["3m"] = (
                        (df_3m["Close"].iloc[-1] / df_3m["Close"].iloc[0]) - 1
                    ) * 100

                if df_6m is not None and len(df_6m) >= 2:
                    performance["6m"] = (
                        (df_6m["Close"].iloc[-1] / df_6m["Close"].iloc[0]) - 1
                    ) * 100

                # Í∏∞Ïà†Ï†Å Ïã†Ìò∏ Î∂ÑÏÑù
                signals = self.monitor_service.monitor_comprehensive_signals(symbol)
                sentiment = self.monitor_service.monitor_market_sentiment(symbol)

                sector_performance[symbol] = {
                    "name": sector_name,
                    "performance": performance,
                    "signals": signals.get("signals", {}) if signals else {},
                    "sentiment": sentiment,
                }

                print(
                    f"  üìä {sector_name} ({symbol}): "
                    f"1M {performance.get('1m', 0):+.1f}%, "
                    f"3M {performance.get('3m', 0):+.1f}%, "
                    f"6M {performance.get('6m', 0):+.1f}%"
                )

            except Exception as e:
                print(f"  ‚ùå {sector_name} ({symbol}): {e}")

        # ÏÑ±Í≥º ÏàúÏúÑ
        rankings = {}
        for period in ["1m", "3m", "6m"]:
            period_data = [
                (symbol, data["performance"].get(period, 0))
                for symbol, data in sector_performance.items()
                if period in data["performance"]
            ]
            period_data.sort(key=lambda x: x[1], reverse=True)
            rankings[period] = period_data

        return {
            "sector_performance": sector_performance,
            "rankings": rankings,
            "analysis_time": datetime.now(),
        }

    def generate_portfolio_report(self, portfolio_key: str):
        """Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        print(f"\nüìã {self.portfolios[portfolio_key]['name']} Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏")
        print("=" * 60)

        # 1. Ïã†Ìò∏ Î∂ÑÏÑù
        signal_analysis = self.analyze_portfolio_signals(portfolio_key)

        if signal_analysis:
            print(f"\nüîî Ïã†Ìò∏ Î∂ÑÏÑù Í≤∞Í≥º:")
            signal_summary = signal_analysis["signal_summary"]
            print(f"  üìà Í∞ïÏÑ∏ Ï¢ÖÎ™©: {len(signal_summary['bullish'])}Í∞ú")
            if signal_summary["bullish"]:
                for symbol in signal_summary["bullish"]:
                    name = signal_analysis["results"][symbol]["name"]
                    price_change = signal_analysis["results"][symbol][
                        "price_change_pct"
                    ]
                    print(f"    - {symbol} ({name}): {price_change:+.2f}%")

            print(f"  üìâ ÏïΩÏÑ∏ Ï¢ÖÎ™©: {len(signal_summary['bearish'])}Í∞ú")
            if signal_summary["bearish"]:
                for symbol in signal_summary["bearish"]:
                    name = signal_analysis["results"][symbol]["name"]
                    price_change = signal_analysis["results"][symbol][
                        "price_change_pct"
                    ]
                    print(f"    - {symbol} ({name}): {price_change:+.2f}%")

            print(f"  ÔøΩ Ï§ëÎ¶Ω Ï¢ÖÎ™©: {len(signal_summary['neutral'])}Í∞ú")

        # 2. ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù
        correlation_analysis = self.calculate_portfolio_correlation(portfolio_key)

        if correlation_analysis:
            print(f"\nüìä ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Î∂ÑÏÑù:")
            print(f"  ÌèâÍ∑† ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ: {correlation_analysis['average_correlation']:.3f}")

            if correlation_analysis["highest_correlation"]:
                high_corr = correlation_analysis["highest_correlation"]
                print(
                    f"  ÏµúÍ≥† ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ: {high_corr[0]} - {high_corr[1]} ({high_corr[2]:.3f})"
                )

            if correlation_analysis["lowest_correlation"]:
                low_corr = correlation_analysis["lowest_correlation"]
                print(
                    f"  ÏµúÏ†Ä ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ: {low_corr[0]} - {low_corr[1]} ({low_corr[2]:.3f})"
                )

        # 3. Ìà¨Ïûê Ï∂îÏ≤ú
        print(f"\nüí° Ìà¨Ïûê Ï∂îÏ≤ú:")
        if signal_analysis:
            bullish_count = len(signal_summary["bullish"])
            total_count = len(signal_analysis["results"])

            if bullish_count / total_count >= 0.6:
                recommendation = "Ï†ÅÍ∑π Îß§Ïàò üöÄ"
            elif bullish_count / total_count >= 0.4:
                recommendation = "ÏÑ†Î≥Ñ Îß§Ïàò üìà"
            elif bullish_count / total_count >= 0.2:
                recommendation = "Í¥ÄÎßù üîÑ"
            else:
                recommendation = "Ï£ºÏùò üìâ"

            print(f"  Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Ï†ÑÎßù: {recommendation}")
            print(
                f"  Í∞ïÏÑ∏ ÎπÑÏú®: {bullish_count}/{total_count} ({bullish_count/total_count:.1%})"
            )

    def print_correlation_matrix(self, correlation_analysis: Dict[str, Any]):
        """ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îß§Ìä∏Î¶≠Ïä§ Ï∂úÎ†•"""
        if not correlation_analysis or "correlation_matrix" not in correlation_analysis:
            return

        corr_matrix = correlation_analysis["correlation_matrix"]

        print(f"\nüìä {correlation_analysis['portfolio_name']} ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îß§Ìä∏Î¶≠Ïä§:")
        print("-" * 60)

        # Ìó§Îçî Ï∂úÎ†•
        symbols = corr_matrix.columns.tolist()
        header = "      " + "".join(f"{s:>8}" for s in symbols)
        print(header)

        # Îß§Ìä∏Î¶≠Ïä§ Ï∂úÎ†•
        for i, symbol in enumerate(symbols):
            row = f"{symbol:>6}"
            for j, corr_val in enumerate(corr_matrix.iloc[i]):
                if i == j:
                    row += f"{'1.000':>8}"
                elif j > i:
                    row += f"{corr_val:>8.3f}"
                else:
                    row += f"{'':>8}"
            print(row)


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    print("üöÄ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í∏∞Ïà†Ï†Å Î∂ÑÏÑù ÏãúÏä§ÌÖú")
    print("=" * 60)

    analyzer = PortfolioAnalyzer()

    try:
        # 1. Í∞Å Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Î≥Ñ Î∂ÑÏÑù
        for portfolio_key in analyzer.portfolios.keys():
            analyzer.generate_portfolio_report(portfolio_key)
            print("\n" + "=" * 60)

        # 2. ÏÑπÌÑ∞ Î°úÌÖåÏù¥ÏÖò Î∂ÑÏÑù
        sector_analysis = analyzer.analyze_sector_rotation()

        if sector_analysis:
            print(f"\nüîÑ ÏÑπÌÑ∞ Î°úÌÖåÏù¥ÏÖò Î∂ÑÏÑù Í≤∞Í≥º")
            print("-" * 40)

            rankings = sector_analysis["rankings"]

            for period in ["1m", "3m", "6m"]:
                if period in rankings:
                    print(f"\nüìä {period.upper()} ÏÑπÌÑ∞ ÏÑ±Í≥º ÏàúÏúÑ:")
                    for i, (symbol, performance) in enumerate(rankings[period][:5], 1):
                        sector_name = sector_analysis["sector_performance"][symbol][
                            "name"
                        ]
                        print(f"  {i}. {sector_name} ({symbol}): {performance:+.1f}%")

        # 3. ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Îß§Ìä∏Î¶≠Ïä§ Ï∂úÎ†• (ETF Ìè¨Ìä∏Ìè¥Î¶¨Ïò§)
        etf_correlation = analyzer.calculate_portfolio_correlation("etf_portfolio")
        analyzer.print_correlation_matrix(etf_correlation)

        print(f"\n‚úÖ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÑù ÏôÑÎ£å!")
        print(f"‚è∞ Î∂ÑÏÑù ÏãúÍ∞Ñ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    except Exception as e:
        print(f"‚ùå Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∂ÑÏÑù Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
