#!/usr/bin/env python3
"""
ÏàòÏùµÎ•† Í≥ÑÏÇ∞ ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏
"""

import os
import sys

# ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
os.environ["DB_HOST"] = "localhost"
os.environ["DB_PORT"] = "5432"
os.environ["DB_NAME"] = "finstage_dev"
os.environ["DB_USER"] = "postgres"
os.environ["DB_PASSWORD"] = "password"

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º Python Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.technical_analysis.service.enhanced_outcome_tracking_service import (
    EnhancedOutcomeTrackingService,
)
from sqlalchemy import text


def main():
    print("üîß ÏàòÏùµÎ•† Í≥ÑÏÇ∞ ÏàòÏ†ï")
    print("=" * 50)

    service = EnhancedOutcomeTrackingService()

    try:
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞è Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨ Ï§ÄÎπÑ
        session, outcome_repo, signal_repo = service._get_session_and_repositories()

        # 1. Î¨∏Ï†úÍ∞Ä ÏûàÎäî Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        print("üîç Î¨∏Ï†úÍ∞Ä ÏûàÎäî Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:")
        print("-" * 40)

        problem_query = """
        SELECT 
            COUNT(*) as total_outcomes,
            COUNT(CASE WHEN so.return_1d > 50 THEN 1 END) as high_returns,
            COUNT(CASE WHEN s.current_price < 5000 AND so.price_1d_after > 15000 THEN 1 END) as suspicious_price_jumps
        FROM signal_outcomes so
        JOIN technical_signals s ON so.signal_id = s.id
        WHERE so.is_complete = TRUE
        """

        problem_result = session.execute(text(problem_query))
        total, high_returns, suspicious = problem_result.fetchone()

        print(f"Ï¥ù ÏôÑÎ£åÎêú Í≤∞Í≥º: {total}Í∞ú")
        print(f"50% Ïù¥ÏÉÅ ÏàòÏùµÎ•†: {high_returns}Í∞ú ({high_returns/total*100:.1f}%)")
        print(f"ÏùòÏã¨Ïä§Îü¨Ïö¥ Í∞ÄÍ≤© Ï†êÌîÑ: {suspicious}Í∞ú")

        # 2. ÏàòÏùµÎ•† Ïû¨Í≥ÑÏÇ∞ (ÏÉòÌîå)
        print("\nüîÑ ÏàòÏùµÎ•† Ïû¨Í≥ÑÏÇ∞ (ÏÉòÌîå 10Í∞ú):")
        print("-" * 50)

        sample_query = """
        SELECT 
            so.id,
            s.current_price as signal_price,
            so.price_1h_after,
            so.price_1d_after,
            so.return_1h,
            so.return_1d
        FROM signal_outcomes so
        JOIN technical_signals s ON so.signal_id = s.id
        WHERE so.is_complete = TRUE
        AND so.price_1d_after IS NOT NULL
        AND s.current_price IS NOT NULL
        ORDER BY so.id DESC
        LIMIT 10
        """

        sample_result = session.execute(text(sample_query))
        samples = sample_result.fetchall()

        updates_needed = []

        for sample in samples:
            (
                outcome_id,
                signal_price,
                price_1h,
                price_1d,
                stored_return_1h,
                stored_return_1d,
            ) = sample

            # Ïò¨Î∞îÎ•∏ ÏàòÏùµÎ•† Í≥ÑÏÇ∞
            correct_return_1h = None
            correct_return_1d = None

            if signal_price and price_1h:
                correct_return_1h = (
                    (float(price_1h) - float(signal_price)) / float(signal_price)
                ) * 100

            if signal_price and price_1d:
                correct_return_1d = (
                    (float(price_1d) - float(signal_price)) / float(signal_price)
                ) * 100

            print(f"ID {outcome_id}:")
            print(f"  Ïã†Ìò∏Í∞ÄÍ≤©: ${float(signal_price):.2f}")
            print(f"  1ÏùºÌõÑÍ∞ÄÍ≤©: ${float(price_1d):.2f}")
            print(f"  Ï†ÄÏû•Îêú ÏàòÏùµÎ•†: {float(stored_return_1d or 0):.2f}%")
            print(f"  Ïò¨Î∞îÎ•∏ ÏàòÏùµÎ•†: {correct_return_1d:.2f}%")

            # Ï∞®Ïù¥Í∞Ä ÌÅ∞ Í≤ΩÏö∞ ÏóÖÎç∞Ïù¥Ìä∏ ÎåÄÏÉÅÏóê Ï∂îÍ∞Ä
            if abs(float(stored_return_1d or 0) - correct_return_1d) > 1.0:
                updates_needed.append(
                    {
                        "id": outcome_id,
                        "correct_return_1h": correct_return_1h,
                        "correct_return_1d": correct_return_1d,
                    }
                )
                print(f"  ‚ö†Ô∏è ÏàòÏ†ï ÌïÑÏöî!")
            else:
                print(f"  ‚úÖ Ï†ïÏÉÅ")
            print()

        # 3. Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÌñâ Ïó¨Î∂Ä ÌôïÏù∏
        if updates_needed:
            print(f"üîß {len(updates_needed)}Í∞úÏùò Î†àÏΩîÎìúÍ∞Ä ÏàòÏ†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")

            # ÏÇ¨Ïö©Ïûê ÌôïÏù∏
            response = input("ÏàòÏùµÎ•†ÏùÑ ÏàòÏ†ïÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ")

            if response.lower() == "y":
                print("üîÑ ÏàòÏùµÎ•† ÏàòÏ†ï Ï§ë...")

                for update in updates_needed:
                    update_query = """
                    UPDATE signal_outcomes 
                    SET 
                        return_1h = :return_1h,
                        return_1d = :return_1d,
                        updated_at = NOW()
                    WHERE id = :id
                    """

                    session.execute(
                        text(update_query),
                        {
                            "id": update["id"],
                            "return_1h": update["correct_return_1h"],
                            "return_1d": update["correct_return_1d"],
                        },
                    )

                session.commit()
                print(f"‚úÖ {len(updates_needed)}Í∞ú Î†àÏΩîÎìú ÏàòÏ†ï ÏôÑÎ£å!")
            else:
                print("‚ùå ÏàòÏ†ïÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.")
        else:
            print("‚úÖ ÏàòÏ†ïÏù¥ ÌïÑÏöîÌïú Î†àÏΩîÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.")

        # 4. Ï†ÑÏ≤¥ ÏàòÏùµÎ•† Ïû¨Í≥ÑÏÇ∞ Ï†úÏïà
        print("\nüí° Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÏàòÏùµÎ•† Ïû¨Í≥ÑÏÇ∞:")
        print("-" * 40)
        print("Î™®Îì† Îç∞Ïù¥ÌÑ∞Ïùò ÏàòÏùµÎ•†ÏùÑ Ïû¨Í≥ÑÏÇ∞ÌïòÎ†§Î©¥ Îã§Ïùå SQLÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî:")
        print(
            """
UPDATE signal_outcomes so
JOIN technical_signals s ON so.signal_id = s.id
SET 
    so.return_1h = CASE 
        WHEN so.price_1h_after IS NOT NULL AND s.current_price IS NOT NULL AND s.current_price > 0
        THEN ((so.price_1h_after - s.current_price) / s.current_price) * 100
        ELSE NULL
    END,
    so.return_4h = CASE 
        WHEN so.price_4h_after IS NOT NULL AND s.current_price IS NOT NULL AND s.current_price > 0
        THEN ((so.price_4h_after - s.current_price) / s.current_price) * 100
        ELSE NULL
    END,
    so.return_1d = CASE 
        WHEN so.price_1d_after IS NOT NULL AND s.current_price IS NOT NULL AND s.current_price > 0
        THEN ((so.price_1d_after - s.current_price) / s.current_price) * 100
        ELSE NULL
    END,
    so.return_1w = CASE 
        WHEN so.price_1w_after IS NOT NULL AND s.current_price IS NOT NULL AND s.current_price > 0
        THEN ((so.price_1w_after - s.current_price) / s.current_price) * 100
        ELSE NULL
    END,
    so.return_1m = CASE 
        WHEN so.price_1m_after IS NOT NULL AND s.current_price IS NOT NULL AND s.current_price > 0
        THEN ((so.price_1m_after - s.current_price) / s.current_price) * 100
        ELSE NULL
    END,
    so.updated_at = NOW()
WHERE so.is_complete = TRUE;
        """
        )

    except Exception as e:
        print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        import traceback

        traceback.print_exc()
    finally:
        # ÏÑ∏ÏÖò Ï†ïÎ¶¨
        if "session" in locals():
            session.close()


if __name__ == "__main__":
    main()
