from datetime import datetime
from typing import Optional
from app.market_price.infra.client.yahoo_price_client import YahooPriceClient
from app.market_price.service.price_snapshot_service import PriceSnapshotService
from app.market_price.service.price_high_record_service import PriceHighRecordService
from app.market_price.service.price_alert_log_service import PriceAlertLogService
from app.common.constants.thresholds import CATEGORY_THRESHOLDS, SYMBOL_THRESHOLDS
from app.common.constants.symbol_names import SYMBOL_MONITORING_CATEGORY_MAP
from app.common.utils.telegram_notifier import (
    send_price_rise_message,
    send_price_drop_message,
    send_new_high_message,
    send_drop_from_high_message,
)


class PriceMonitorService:
    def __init__(self):
        self.client = YahooPriceClient()
        self.snapshot_service = PriceSnapshotService()
        self.high_service = PriceHighRecordService()
        self.alert_log_service = PriceAlertLogService()

    def fetch_latest_price(self, symbol: str) -> Optional[float]:
        """ÌòÑÏû¨Í∞Ä(1Î∂ÑÎ¥â Í∏∞Ï§Ä ÏµúÏã† Í∞ÄÍ≤©) Í∞ÄÏ†∏Ïò§Í∏∞"""
        return self.client.get_latest_minute_price(symbol)

    def _get_threshold(self, symbol: str, alert_type: str) -> Optional[float]:
        """
        Ïã¨Î≥ºÎ≥Ñ ÎòêÎäî Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏûÑÍ≥ÑÏπò Î∞òÌôò
        Ïòà: "price_rise", "price_drop", "drop_from_high"
        """
        if symbol in SYMBOL_THRESHOLDS and alert_type in SYMBOL_THRESHOLDS[symbol]:
            return SYMBOL_THRESHOLDS[symbol][alert_type]

        category = SYMBOL_MONITORING_CATEGORY_MAP.get(symbol)
        if category and alert_type in CATEGORY_THRESHOLDS.get(category, {}):
            return CATEGORY_THRESHOLDS[category][alert_type]

        return None

    def check_price_against_baseline(self, symbol: str):
        """Ï†ÑÏùº Ï¢ÖÍ∞Ä Î∞è ÏÉÅÏû• ÌõÑ ÏµúÍ≥†Í∞Ä Í∏∞Ï§ÄÏúºÎ°ú Í∞ÄÍ≤©ÏùÑ Î™®ÎãàÌÑ∞ÎßÅÌïòÍ≥†, Ï°∞Í±¥ ÎßåÏ°± Ïãú ÏïåÎ¶º Ï†ÑÏÜ°"""
        current_price = self.fetch_latest_price(symbol)
        if current_price is None:
            print(f"‚ö†Ô∏è {symbol} ÌòÑÏû¨ Í∞ÄÍ≤© Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®")
            return

        now = datetime.now()

        ### 1. Ï†ÑÏùº Ï¢ÖÍ∞Ä Í∏∞Ï§Ä ###
        prev_snapshot = self.snapshot_service.get_latest_snapshot(symbol)
        if prev_snapshot:
            diff = current_price - prev_snapshot.close
            percent = (diff / prev_snapshot.close) * 100
            print(f"üìä {symbol} Ï†ÑÏùº Ï¢ÖÍ∞Ä Í∏∞Ï§Ä: ÌòÑÏû¨Í∞Ä {current_price:.2f}, Î≥ÄÎèôÎ•† {percent:.2f}%")

            # ÏÉÅÏäπ ÏïåÎ¶º
            rise_threshold = self._get_threshold(symbol, "price_rise")
            if rise_threshold is not None and percent >= rise_threshold:
                if not self.alert_log_service.exists_recent_alert(symbol, "price_rise", "prev_close", 60):
                    send_price_rise_message(symbol, current_price, prev_snapshot.close, percent, now)
                    self.alert_log_service.save_alert(
                        symbol=symbol,
                        alert_type="price_rise",
                        base_type="prev_close",
                        base_price=prev_snapshot.close,
                        current_price=current_price,
                        threshold_percent=rise_threshold,
                        actual_percent=percent,
                        base_time=prev_snapshot.snapshot_at,
                        triggered_at=now,
                    )

            # ÌïòÎùΩ ÏïåÎ¶º
            drop_threshold = self._get_threshold(symbol, "price_drop")
            if drop_threshold is not None and percent <= drop_threshold:
                if not self.alert_log_service.exists_recent_alert(symbol, "price_drop", "prev_close", 60):
                    send_price_drop_message(symbol, current_price, prev_snapshot.close, percent, now)
                    self.alert_log_service.save_alert(
                        symbol=symbol,
                        alert_type="price_drop",
                        base_type="prev_close",
                        base_price=prev_snapshot.close,
                        current_price=current_price,
                        threshold_percent=abs(drop_threshold),
                        actual_percent=percent,
                        base_time=prev_snapshot.snapshot_at,
                        triggered_at=now,
                    )

        ### 2. ÏµúÍ≥†Í∞Ä Í∏∞Ï§Ä ###
        high_record = self.high_service.get_latest_record(symbol)
        if high_record:
            diff = current_price - high_record.price
            percent = (diff / high_record.price) * 100
            print(f"üö® {symbol} ÏµúÍ≥†Í∞Ä Í∏∞Ï§Ä: ÌòÑÏû¨Í∞Ä {current_price:.2f}, Î≥ÄÎèôÎ•† {percent:.2f}%")

            # ÏµúÍ≥†Í∞Ä Í∞±Ïã†
            if current_price > high_record.price:
                if not self.alert_log_service.exists_recent_alert(symbol, "new_high", "all_time_high", 60):
                    send_new_high_message(symbol, current_price, now)
                    self.alert_log_service.save_alert(
                        symbol=symbol,
                        alert_type="new_high",
                        base_type="all_time_high",
                        base_price=high_record.price,
                        current_price=current_price,
                        threshold_percent=0.0,
                        actual_percent=percent,
                        base_time=high_record.recorded_at,
                        triggered_at=now,
                    )

            # ÏµúÍ≥†Í∞Ä ÎåÄÎπÑ ÌïòÎùΩ
            drop_from_high_threshold = self._get_threshold(symbol, "drop_from_high")
            if drop_from_high_threshold is not None and percent <= drop_from_high_threshold:
                if not self.alert_log_service.exists_recent_alert(symbol, "drop_from_high", "all_time_high", 60):
                    send_drop_from_high_message(symbol, current_price, high_record.price, percent, now)
                    self.alert_log_service.save_alert(
                        symbol=symbol,
                        alert_type="drop_from_high",
                        base_type="all_time_high",
                        base_price=high_record.price,
                        current_price=current_price,
                        threshold_percent=abs(drop_from_high_threshold),
                        actual_percent=percent,
                        base_time=high_record.recorded_at,
                        triggered_at=now,
                    )
